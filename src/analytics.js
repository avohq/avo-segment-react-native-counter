// Generated by AvoCode VERSION 0.0.1, PLEASE EDIT WITH CARE
/* eslint-disable */

var isDev = process.env.NODE_ENV !== 'production';

if (typeof __DEV__ !== 'undefined') {
  isDev = __DEV__;
}

var segment = require('avo-react-native-analytics-segment-io');
var segmentDevApiKey = 'QHjQR9BpTQ6gsiM0TftH0fVs5G172x3Z';
var segmentProdApiKey = 'QHjQR9BpTQ6gsiM0TftH0fVs5G172x3Z';

var asserts;

var setup_ = function(
  options,
  systemProps,
  analyticsPlatformOptions,
  callback
) {
  if (options.validateProperties !== true) {
    isDev = false;
  }

  if (options.useProductionKey === true) {
    segment.init(segmentProdApiKey, analyticsPlatformOptions, callback);
  } else {
    segment.init(segmentDevApiKey, analyticsPlatformOptions, callback);
  }
};

var setSystemProps_ = function(systemProps) {};

var increment = function(oldValue, newValue) {
  if (isDev === true) {
    assertOldValue(oldValue);
    assertNewValue(newValue);
  }

  if (isDev === true) {
    console.log('[avo] Event sent:', 'Increment', 'Event props:', {
      'Old Value': oldValue,
      'New Value': newValue,
    });
  }

  segment.logEvent('Increment', {
    'Old Value': oldValue,
    'New Value': newValue,
  });
};

var decrement = function(oldValue, newValue) {
  if (isDev === true) {
    assertOldValue(oldValue);
    assertNewValue(newValue);
  }

  if (isDev === true) {
    console.log('[avo] Event sent:', 'Decrement', 'Event props:', {
      'Old Value': oldValue,
      'New Value': newValue,
    });
  }

  segment.logEvent('Decrement', {
    'Old Value': oldValue,
    'New Value': newValue,
  });
};

var signIn = function(userId_) {
  if (isDev === true) {
    assertUserId(userId_);
  }

  if (isDev === true) {
    console.log(
      '[avo] Event sent:',
      'Sign In',
      'Event props:',
      {},
      'User props:',
      {'User Id': userId_}
    );
  }

  segment.identify(userId_);
  segment.logEventWithUserProperties('Sign In', {}, {'User Id': userId_});
};

if (isDev === true) {
  var assertOldValue = function(oldValue) {
    asserts.assertInt('Old Value', oldValue);
  };

  var assertUserId = function(userId) {
    asserts.assertString('User Id', userId);
  };

  var assertNewValue = function(newValue) {
    asserts.assertInt('New Value', newValue);
  };
}

exports.setup_ = setup_;
exports.setSystemProps_ = setSystemProps_;
exports.increment = increment;
exports.decrement = decrement;
exports.signIn = signIn;

if (isDev === true) {
  asserts = require('avo-assert-js');
}
